bioinfer : a corpus for information extraction in the biomedical domain .
abstract .
background : lately , there has been a great interest in the application of information extraction methods to the biomedical domain , in particular , to the extraction of relationships of genes , proteins , and rna from scientific publications .
the development and evaluation of such methods requires annotated domain corpora .
results : we present bioinfer ( bio information extraction resource ) , a new public resource providing an annotated corpus of biomedical english .
we describe an annotation scheme capturing named entities and their relationships along with a dependency analysis of sentence syntax .
we further present ontologies defining the types of entities and relationships annotated in the corpus .
currently , the corpus contains 1 100 sentences from abstracts of biomedical research articles annotated for relationships , named entities , as well as syntactic dependencies .
supporting software is provided with the corpus .
the corpus is unique in the domain in combining these annotation types for a single set of sentences , and in the level of detail of the relationship annotation .
conclusion : we introduce a corpus targeted at protein , gene , and rna relationships which serves as a resource for the development of information extraction systems and their components such as parsers and domain analyzers .
the corpus will be maintained and further developed with a current version being available at http : / / www.it.utu.fi / bioinfer .
background .
recent advances in biomedical research methods have greatly accelerated the rate at which new information is published .
as a result , there has been an increased interest in applying natural language processing ( nlp ) methods to the domain of biomedical publications accessible in literature databases such as pubmed [ 1-4 ] .
the attention of the bionlp community has recently focused on information extraction ( ie ) , in particular the development of ie systems for extracting protein-protein interactions .
information extraction systems automatically identify entities and their relationships from free text , producing a structured representation of the relevant information stated in the input text .
such systems can , for example , support researchers in literature searches and serve as the basis for the inference of semantic relationships , such as candidate pathways , stated across several publications .
an annotated corpus is a collection of texts that have been enhanced with markup specifying linguistic and domain information such as syntactic structure , named entity identification , and entity relationships .
in this paper , we introduce bioinfer ( bio information extraction resource ) , a manually annotated corpus resource for ie method evaluation and development in the biomedical domain , accompanied by supporting software .
the corpus consists of 1100 sentences and represents 15 man-months of annotation efforts .
we further present an annotation scheme that combines key annotation types with a detailed definition of entity relationships as well as present two new biomedical ontologies that define bioentity and relationship types .
the availability of annotated corpora is an important prerequisite for nlp research as they provide gold-standard data for method evaluation and development .
the impact of the muc , trec and senseval conferences [ 5-7 ] , for example , has shown how a common shared corpus resource can result in increased focus and rapid advances in the field .
due to the different nature of the language used in biomedical scientific publications , the existing standard corpora of , for example , general and newspaper english are only of limited utility .
with the increased interest in biomedical nlp research , the need has thus emerged for corpora that specifically target the biomedical domain .
most important among the steps typically applied by ie systems to extract information from text are named entity recognition , parsing and domain analysis , where named entity recognition identifies the entities whose relationships are to be found , parsing recovers the syntactic structure of the text , and domain analysis extracts the relationships among the named entities using the information from the other processing steps .
several biomedical corpora have been developed to facilitate the development of the separate ie system components , providing , for example , bioentity , entity relationship , syntax , abbreviation , and coreference annotation ï¿½ we discuss these corpora and relate them to bioinfer in the results and discussion section .
by contrast , the bioinfer corpus provides all these key types of annotation together , for a single set of sentences .
by providing gold-standard input for the major stages in ie , the corpus allows the parallel development of all ie system components .
the shared data facilitates the study of the interplay of the components , for example allowing the source and propagation of errors to be analyzed .
additionally , the corpus addresses a number of issues in the prevailing relationship annotation approach , in which relationships are expressed as pairs of entities .
the bioinfer annotation allows relationships with a complex structure , such as relationships between relationships or relationships of more than two entities .
moreover , the bioinfer annotation scheme defines entity and relationship types that are organized into two interdependent hierarchical ontologies .
the entity type ontology incorporates the established genia ontology of physical types [ 8 ] .
for the users of the corpus , the ontologies precisely define which types of entities and relationships are annotated and how they are related .
by binding the corpus text to typed entities and relationships , the annotation also provides a mapping from the open domain of natural language statements to a limited , controlled vocabulary of types in the ontologies , specifying the words that are used to state entities and relationships of each type .
in applications of the corpus , the ontologies can be used to view the annotation at different levels of abstraction as well as serve as a basis for further interpretation and normalization of the annotated entities and relationships .
the syntactic annotation of the corpus follows the link grammar dependency formalism [ 9 ] .
additionally , it is designed to facilitate automatic transformation to other dependency formalisms .
in previous studies , we have used an early subset of the corpus syntactic annotation to evaluate the performance of the link grammar and connexor machinese syntax dependency parsers in the biomedical domain [ 10,11 ] .
the annotation allowed a detailed error analysis which identified a number of areas for future domain adaptation of link grammar , such as that performed by aubin et al. [ 12 ] .
for the analysis of connexor machinese syntax , we found that while 26 % of the corpus dependencies had to be modified to match the connexor scheme , the corpus annotation allowed most of these to be handled automatically , leaving only 6 % of all dependencies to be manually changed .
this demonstrates the applicability of the corpus also to the evaluation of dependency parsers other than link grammar .
the corpus has also been used as reference data in performing lexical adaptation of link grammar parser to the biomedical domain , showing statistically significant improvement in performance for many adaptation approaches over the performance of the unmodified parser [ 13 ] .
the corpus can further be used for many machine learning tasks .
for example , we have used the corpus syntactic annotation as training and evaluation data in developing kernel-based machine learning methods for parse reranking .
these ranking methods were shown to significantly outperform the link grammar parser ranking heuristics , leading to improved parsing performance [ 14-16 ] .
the entity relationship annotation brings insight into the various relationship types that can hold among entities in the text .
it further reveals the often complicated structure of these relationships and the entities themselves .
the primary use of the annotation is to develop and test an ie system that targets the relationships stated in the text .
due to the fact that both the dependency and the relationship annotation cover the same set of sentences , the interplay between the syntax and the relationships can be studied as well .
further , as both the entity and relationship types are organized in hierarchical ontologies , the annotation facilitates easy step-by-step development whereby only certain types of relationships and certain types of entities are addressed at once .
the paper is organized as follows .
we first briefly introduce the corpus annotation and state the main results .
we then describe the main features of the relationship and entity annotations , the ontologies used for defining the types of relationships and entities , and the binding of these annotations to text of the corpus sentences .
we then present key features of the dependency annotation and finally present corpus statistics and supporting software , and discuss the relationship of the bioinfer corpus to other biomedical corpora .
in the methods section , we discuss in further detail the three main annotation types , presenting , for example , the annotation for anaphora and abbreviation definitions .
results and discussion .
the corpus annotation is divided into three key types , termed entity annotation , entity relationship annotation , and dependency annotation .
we now briefly introduce these annotation types ; more detailed descriptions are given in the corpus annotation section .
the foundation of the entity annotation is the identification of named entities of the gene , protein , and rna types .
when relevant to relationships , other physical entities as well as abstract process and property entities pertaining to the named entities are also identified in the annotation .
for example , in the sentence deletion of sir4 enhanced meti5 silencing. the annotated entities are not only the genes sir4 and meti5 , but also the processes deletion of sir4 and meti5 silencing that pertain to the genes .
together with entity typing , this extended annotation allows a detailed resolution of the relationships stated in the sentence .
the entity relationship annotation describes relationships holding between the entities as stated in the individual sentences .
the relationships are annotated through logic formulas where the predicates define relationship types and predicate arguments identify the entities that are related .
finally , the dependency annotation describes the syntax of each sentence in the corpus .
each sentence is given a full dependency syntax annotation based on the link grammar dependency syntax formalism .
an example of the dependency annotation is given in figure 1 .
figure 2 illustrates a complete sentence with all the information given by the corpus annotation and the ontologies .
we now briefly summarize our contribution .
the primary outcome of the research presented in this paper is the corpus itself , a public resource that facilitates the development of ie systems in the biomedical domain , available along with supporting software in a format that is straightforward to process [ 17 ] .
the corpus contributes hand-annotated gold-standard data to a domain where such resources are scarce .
further , the bioinfer corpus is unique in combining the named entity , syntax , and entity relationship annotations for the same set of sentences and in the level of detail of the relationship annotation .
another outcome of the research are the ontologies , in particular the relationship type ontology , which defines a large number of possible relationship types and organizes them in a hierarchical manner .
the ontologies can be used to focus an ie system only to certain types of relationships and entities , possibly considering different levels of generality .
the ontologies can also be used to support various automated reinterpretations of the annotation based on rules attached to the various entity and relationship types in the ontology .
moreover , the binding of entities and relationships stated in the corpus text to specific types in the two ontologies defines mappings from natural language statements to controlled vocabularies , providing data for the analysis of how each concept is expressed in practice .
the process of designing the annotation scheme and building the corpus has further contributed to a better understanding of the domain of entity relationships .
an analysis of the corpus shows that 10 % of the relationships are of a complex nature with more than two related entities and relationships affecting other relationships rather than only entities .
further , 14 % of the entities involved in a relationship are processes or properties as opposed to physical entities .
these results illustrate the information loss in the prevailing annotation approach where only pairwise relationships are used to relate only physical entities .
moreover , we find that there is no one-to-one correspondence between relationship types and the words that state the relationship in the text .
many expressions are ambiguous , that is , they can be used to state different relationship types , depending on the context .
this emphasizes that context-based disambiguation is necessary to resolve relationship types in the text .
corpus annotation .
the bioinfer corpus consists of individual sentences , each of which is separately assigned the entity , relationship , and dependency annotations .
further , there are two relationships : the interact relationship between the munc-18-2 and syntaxin 3 proteins and the control relationship between the previous interact relationship and the association of snares process .
the dependency syntax specifies , for example , a subject- predicate dependency between the words interaction and controls and a object-predicate dependency between the words association and controls .
there is an interdependence between the various annotation types in the sense that , for example , the dependency annotation respects named entities and , conversely , certain rules for annotating the entities and relationships make use of the syntax .
for the purpose of this presentation , we will , however , treat the annotation types separately .
entity relationship annotation .
the entity relationship annotation , or relationship annotation in short , is based on the notions of an entity and a relationship .
an entity denotes a named bioentity or a physical or abstract entity pertaining to a named bioentity .
a relationship captures a stated relation between two or more entities or other relationships .
both the entities and the relationships reflect the information explicitly stated in the sentence .
they exist in their own right , abstracted from the sentence text , and we first discuss them on this level .
later in this section , we introduce how the entities and relationships are bound to the actual text of the sentences .
the relationships belong to a variety of relationship types and are often structurally complex .
the relationship types can be , for example , observed co-occurrence , sequence similarity , or physical binding .
in order to capture the various relationship types as well as their different levels of specificity , we introduce the relationship type ontology that defines relationship types and organizes them in a hierarchical manner , from the most general to the most specific relationship types .
the ontology specifies over 60 relationship types at 5 levels of generality .
each annotated relationship is categorized within this ontology at the most specific level applicable .
apart from belonging to a large variety of types , the relationships are also structurally complex .
the prevailing approach in previously published biomedical corpora has been to only annotate pairwise relationships between physical entities .
however , it becomes clear that this representation in many cases fails to accurately capture the stated information .
consider , for example , the following sentence .
four yeast spliceosomal proteins ( prp5 , prp9 , prp11 , and prp21 ) interact to promote u2 snrnp binding to pre-mrna .
using only pairwise relationships , the sentence would most likely be decomposed into all pairwise relationships among the spliceosomal proteins and all pairwise relationships between the spliceosomal proteins and u2 snrnp .
however , any such decomposition leads to significant imprecisions .
the sentence does not specify which pairwise interactions take place among the four spliceosomal proteins , nor does it assert a pairwise relationship between any of the spliceosomal proteins and , for example , u2 snrnp .
instead of using only pairwise relationships , the information in the sentence can be better captured through structurally more complex relationships : an interact relationship among all the four spliceosomal proteins and a promote relationship between the interact relationship and the pairwise bind relationship .
in the bioinfer corpus , the relationships are annotated using logic formulas .
each relationship is expressed through a predicate whose arguments are instantiated with entities or other predicates .
the predicate name , arity , and the semantic roles of its arguments are defined in the relationship type ontology together with a description of the relationships intended to be annotated using this predicate .
the relationship annotation of a sentence is then a set of formulas that state all the relevant relationships in the sentence .
let us consider the previous example sentence .
the formula describes the relationships stated in the sentence , accounting for their complex nature .
it is this formula that is used in the corpus to annotate the example sentence .
the formula-based annotation system is more powerful than the simple pairwise relationship annotation .
however , practical considerations and the current state-of-the- art in ie systems often call for pairwise relationships , even at the cost of introducing inaccuracies such as those discussed above .
it is thus necessary to employ a scheme where the annotation can be decomposed in terms of pairwise relationships .
the bioinfer annotation scheme allows such decomposition .
multiple-argument predicates such as interact ( prp5 , prp9 , prp11 , prp21 ) can be decomposed in the obvious manner and predicates whose arguments are other predicates can be either omitted or recursively decomposed .
it depends on the predicate whether better approximation can be achieved by omission or by recursive decomposition .
several examples of the relationship annotation are provided in appendix i. entity annotation .
the bioinfer corpus is focused on the development of ie systems for extracting relationships between genes , proteins , and rnas .
this focus influences the entity annotation as currently only entities that are relevant to this focus have been annotated .
as a typical ie system extracts relationships between named entities , we require that an entity is named or pertaining to a named entity , more specifically a named gene , protein , or rna , in order to be relevant to the corpus focus .
for example , actin is a named entity , actin expression pertains to a named entity , but a 50 kda protein as an entity is not considered named and thus not annotated in the current version of the corpus .
the typical use in literature and databases such as swiss-prot is used as a guide in deciding for borderline cases whether an entity is considered named or not named .
in addition to named entities , extended named entities , defined as terms denoting other physical entities , processes and properties pertaining to named entities , are also annotated when relevant to relationships .
further , the entity deletion of sir4 is a process extended named entity pertaining to sir4 , similarly for mura3 silencing and meti5 silencing .
in the sentence finally , both receptors can interact with fadd , tradd , and rip. the annotation identifies three entities : the named entities fadd , tradd , and rip .
the reference to both receptors does not constitute an entity , because it is not a named entity , nor it is pertaining to a named entity ( within the sentence ) .
while it is common to restrict ie systems to only take into account named bioentities as objects participating in relationships , consideration of extended named entities allows a better resolution of the actual statements in the sentence .
consider the following example : abundance of actin is affected by the differential calreticulin expression .
although it is not incorrect to state that calreticulin affects actin , a more detailed resolution of the entities is desirable .
the affect relationship in this sentence is between two property / process entities : abundance of actin and calreticulin expression .
abundance of actin is a property pertaining to actin and calreticulin expression is a process pertaining to calreticulin .
both actin and calreticulin are named entities .
as a further illustration , consider the sentence characterization of gelsolin truncates that inhibit actin depolymerization by severing activity of gelsolin and cofilin. where the related entities are gelsolin truncates , actin depolymerization , activity of gelsolin and activity of cofilin rather than the proteins gelsolin , actin , and cofilin themselves .
the need to resolve that , for instance , abundance of actin is a protein amount property pertaining to the protein actin leads to two crucial entity annotation concepts : entity nesting and entity typing .
entity nesting allows annotation of entities within entities with the outer entity typically being a semantic modification , extension or specification of the inner entity .
for instance , the outer entity abundance of actin is a specification of the inner entity actin in the sense that it identifies a single property of actin .
each entity is given a type from the hierarchical ontology of entity types developed for this purpose .
the ontology captures all relevant entity types , both physical entity types such as gene and protein as well as abstract entity types such as process and property .
similarly to the relationship type ontology , the entity types are organized in a hierarchical manner and in the annotation each entity is given the most specific applicable type from the ontology .
the introduction of entity nesting and typing allows us now to state a general principle regarding the entity annotation .
only named entities of the gene , protein , and rna types are annotated in each sentence .
in addition , those named entities that participate in a relationship are nested inside the broadest entity relevant to the particular relationship .
thus , up to special cases described later , every entity that participates in an annotated relationship has a named gene , protein or rna at its innermost level of nesting .
relationship and entity type ontologies .
before discussing the bioinfer relationship ontology , we briefly characterize its design goals in relation to those of other ontologies .
there are a number of biomedical and top-level ontologies , each of which defines a part of the domain of the entities and relationships identified in bioinfer .
for instance , many physical relationships on the molecular level are specified within the molecular function ontology of gene ontology ( go ) [ 18 ] .
similarly , control processes such as upregulation are defined in the biological process ontology of go .
on the other hand , non-process relationships such as sequence similarity fall in scope of bioinfer annotation , but are not defined in go .
moreover , bioinfer captures generic relationships such as condition whereby unknown molecular dependencies result in a process or event being a necessary condition for another process or event to take place .
for instance in the sentence alpha-catenin links beta-catenin to the actin-based cytoskeleton alpha-catenin causes an underspecified relationship between beta-catenin and the actin-based cytoskeleton .
however , the molecular basis for these relationships remain unspecified .
there are no terms corresponding to the cause / link relationships at this level of generality in go .
another consideration is the aim of the bioinfer corpus at supporting ie systems in the domain .
while pathway ontologies such as biopax [ 19 ] aim at the description of known molecular pathways , bioinfer aims at capturing what was stated in free text , which is usually not definite knowledge .
the bioinfer relationship ontology captures the domain of statements about relationships rather than the relationships themselves .
thus , by using the ontology , the annotation avoids inference which refines text statements into pathway knowledge , and captures only the explicitly stated facts .
taking into account the considerations discussed above , we have designed the ontology to capture the relationships present in the bioinfer corpus text at a level of detail suitable for both the annotators and later application of the corpus to ie system development .
the ontology was constructed based on the corpus data , to cover statements about the biologically relevant relationships found in the corpus text .
it by enumeration defines the set of relationships relevant with respect to bioinfer .
in this respect , it is closer to a hierarchical lexicon rather than a complete ontology defining the broad domain of biomedical entity interactions and relationships .
the relationship type ontology ( figure 3 ) specifies four broad classes of relationships .
the observation class captures experimental observations , such as co-occurrence and coprecipitation .
the classes part- of and is-a describe taxonomical , substructure / superstructure , physical / functional similarity , and equality relationships .
the fourth class of relationships specifies causal relationships , where one entity causes a change in the state of another entity .
while the class structure of the relationship ontology is fixed , the predicates are introduced into the ontology according to need ï¿½ the choice of predicates is thus empirical and depends on the coverage of the annotated corpus .
for example , of all the possible post-translational modifications only few , such as phosphorylate , were sufficiently common in the corpus to merit a separate predicate in the ontology .
to illustrate the coverage of the predicates of the annotated relationships and to estimate how often new predicates would need to be added in extending the annotation , we calculated the cumulative total number of different predicates that occur in the annotation when traversing the sentences in an arbitrary order ( figure 4 ) .
we find that , for example , 50 % of all predicates are , on average , seen already after the first 74 sentences .
further , the total number of predicates seen increases only by one in approximately the last 220 sentences .
we may extrapolate that to annotate another 1100 sentences , only approximately five new predicates would need to be introduced into the ontology .
the state of an entity , for the purpose of the bioinfer corpus , is characterized by four properties : amount , location , dynamics , and physical .
these properties specify the amount , spatial distribution , degree of activity , and physical state of the entity .
in the relationship type ontology , the change node , a specialization of the causal node , has for each of the four properties a subtree that contains predicates for relationships that affect the respective property , thus resulting in a change of the state .
for example , an upregulation relationship affects the dynamics of an entity and therefore the upregulate predicate is located in the dynamics subtree .
the genia event ontology [ 20 ] serves a similar purpose as the bioinfer relationship ontology .
it will be used in the future event annotation of the genia corpus and has been designed as a modified subset of 34 terms from go biological process ( 32 terms ) and molecular function ( 2 terms ) ontologies , with three additional terms .
there are similarities in the structure of the bioinfer relationship and genia event ontologies .
for example , the metabolism vs. regulation distinction in the genia event ontology is comparable to the physical vs. dynamics distinction in the bioinfer relationship ontology .
however , the genia event ontology focuses on the metabolism subtree , while the bioinfer relationship ontology focuses on the dynamics sub- tree , both ontologies providing a more detailed resolution at their focus point .
additionally , the genia event ontology does not currently support non-process relationships .
several groups have undertaken efforts to define and use frames , or conceptual structures , mostly focusing on the definition of predicate-argument structures for verbs [ 21- 24 ] .
frame recognition has been proposed as a step in information extraction processes .
in the biomedical domain a recent effort , pasbio , defined argument structures for 30 verbs known to be used to describe biological events [ 25 ] .
pasbio takes a verb-oriented approach following the propbank scheme .
the bioinfer relationship annotation differs from efforts to define and use verb frames for ie in both aims and focus .
however , we note that in this context the bioinfer approach most resembles framenet in that the annotation is centered around relationships instead of verbs and includes relationships stated through words other than verbs .
also , by contrast to propbank and pasbio , bioinfer defines only the minimal core arguments of the relationship specifying the participants in the relationship .
the annotation ( b ) differs from the annotation ( a ) by interpreting the verb cause .
by contrast , the sentences ( ii ) and ( iii ) have each only one possible annotation in the bioinfer corpus : the sentence ( ii ) would be annotated using ( b ) and the sentence ( iii ) would be annotated using ( a ) with cause replaced by suppress .
the sentences ( i ) and ( iii ) have the same surface structure and it would thus be practical if their annotation formulas had the same structure .
on the other hand , sentences ( i ) and ( ii ) have a very similar ( although not fully equal ) meaning and it would thus be desirable for them to have the same annotation .
generally , this situation arises with generic statements such as cause , result in , and lead to .
we chose not to interpret such generic statements .
the sentence ( i ) would thus be annotated according to ( a ) .
to alleviate the impact of the decision on the contrast of ( i ) with ( ii ) , we design the entity type ontology to mirror parts of the relationship type ontology in a way that allows automatic reinterpretation of the annotation from ( a ) to ( b ) .
we now introduce the entity type ontology .
the entity type ontology ( figure 5 ) comprises of three main subtrees .
the physical entity subtree is , up to minor differences , the genia ontology of physical entities .
for example , we introduce gene as a specialization of domain or region of dna and fusion protein as a specialization of individual protein .
the process subtree mirrors the change subtree in the relationship type ontology .
for almost every state change in the change subtree of the relationship ontology ( e.g. phosphorylate ) there is a corresponding process in the process subtree of the entity type ontology ( e.g. phosphorylation ) .
the predicates in the change subtree of the relationship type ontology are used in sentences like ( ii ) while their corresponding process entity types are used in sentences like ( i ) and ( iii ) .
the last main subtree of the entity type ontology is the property subtree , which defines the main properties associated with entity state , that is , amount , location , function , dynamics , and physical state .
the interrelationship of the ontologies is illustrated in figure 6 .
the key relationship between the ontologies is the correspondence of the process and change subtrees .
this correspondence is due to the practical focus of the corpus on ie .
in isolation , process extended entities are not of relevance , because they do not specify a relationship of several named bioentities .
for instance , cofilin phosphorylation describes a biological process which is not of interest as a relationship phosphorylate ( _ , cofilin ) , because its agent is left unspecified .
however , it is of interest as a process if it participates in some other relationship .
for this reason , we maintain separate definitions for the same underlying biological phenomenon as a relationship and as a process extended named entity .
however , due to the correspondence between the ontologies , it is possible to automatically reinterpret the process extended named entities in terms of underspecified relationships , as exemplified in this paragraph , and thus remove the distinction .
text binding .
we have so far introduced the entities and relationships without discussing their binding to the text in the corpus .
for instance , in the sentence inhibition of actina polymerization by a synthetic dodecapeptide patterned on the sequence around the actinb- binding site of cofilin. the desired output of an ie system is the bind ( cofilin , actin ) relationship .
while the exact words in the sentence which were used to extract this information , in this case actina vs. actinb , are not necessarily of particular interest to the users of the ie system , they are of crucial importance in its development .
it is important to specify text binding for the entities and relationships since correct information extracted from incorrect words is usually considered incorrect in ie system evaluation .
in the example above , if the ie system used the word actina to extract the relationship bind ( cofilin , actin ) , the output would have to be considered erroneous .
up to very few exceptions detailed later in the methods section , each entity and each predicate in the bioinfer corpus annotation is bound to the sentence text .
as a rule , an entity is always bound to the minimal text that suffices to resolve the identity of the entity and its type within the ontology .
a predicate is bound to the minimal text that suffices to infer the predicate name and thus the type of the corresponding relationship .
typically , assigning the text binding for an entity is straightforward and clear rules can be constructed to guide the annotators .
the text binding for a predicate is , on the other hand , less straightforward and developing a set of rules to guide the annotators is more difficult .
most relationships are stated with a verb and this verb then becomes the text binding for the predicate .
there are , however , many other word and phrase categories that appear in a text binding for a predicate , such as also known as stating name equality and recruitment of ... to stating a localization relationship .
the choice of the predicate based on the sentence text is context-dependent : there is no one-to-one correspondence between the words and phrases of the text and the predicates used .
the relationship type ontology serves as a controlled vocabulary : it defines a set of types , each of which can be stated in many different ways in the text .
for example , all of the phrases affinity for , bind to , associate with , cofactor , contact to , contains site for , epitopes on , receptor for , and many other , have been used in the corpus in text binding for the predicate bind .
on the other hand , the phrase associate with is also commonly bound to the predicate relate in cases where it does not imply direct physical binding .
there is thus a many-to-many correspondence between the actual text phrases and the relationship types .
for the purpose of the dependency annotation , the sentence text is divided into tokens following a simple set of rules that can be easily implemented .
however , for the entity and relationship annotation the tokens are not sufficiently detailed .
consider , for example , the token arp2 / 3 which contains two entities , arp2 and arp3 .
we aim at capturing such entities and consequently our entity annotation scheme allows the tokens to be divided into sub- tokens .
in the example , the token arp2 / 3 is divided into the subtokens arp 2 / 3 .
these subtokens are then combined into two entities , arp2 and arp3 .
the text correspondence of an entity is thus defined as a set of subtokens that , when textually concatenated , form the string identifying the entity .
for nested entities , the subtokens of the inner entity are a proper subset of the subtokens of the outer entity .
let us now summarize the key concepts in the entity relationship annotation .
relationships hold between entities .
entities can be either physical entities such as proteins or abstract entities such as processes and properties .
the entities are nested to capture their inner structure .
the type of each entity is annotated using the entity type ontology .
the relationships among the entities are stated as logic formulas with predicates defined in the relationship type ontology , which also specifies the meaning of each predicate and the roles of its arguments .
the annotation is bound to the text through sets of subtokens assigned to the entities and predicates .
the ontologies are interdependent with the connection being the notion of entity state , state properties , and changes in state .
dependency annotation .
many of the relationship statements are syntactically complex , involving , for example , coordination and long-distance dependencies between the words stating the relationship .
to extract such relationships , many recently proposed ie systems employ full parsing [ 26-30 ] .
to develop and evaluate both the parsing and domain analysis components of such systems , syntactic annotation is necessary .
the bioinfer corpus contains syntactic annotation using the link grammar ( lg ) formalism .
lg is a well-documented dependency-type grammatical formalism with the advantage that the link grammar parser is freely available and open source [ 31 ] .
the lg grammar and its documentation can thus be examined in detail and serve as a reference for both annotators and users of the corpus .
lg has further been applied to several bionlp tasks , including ie targeting protein-protein interactions [ 27,29,32,33 ] .
in producing the bioinfer corpus annotation , the lg formalism was followed systematically and extended only when necessary to provide annotation for phenomena not covered by the current version of the grammar .
due to the large number of dependency types in the lg formalism ( approximately 100 main types and 400 types in total ) , we use an automatic method to assign the types ; the method is presented in the methods section .
in addition to considering correctness and completeness requirements in creating the annotation , we also take into account practical aspects of ie system development and adopt some of the approximations that are implemented in parsers that help to increase robustness and decrease ambiguity , while not being harmful to ie performance .
for example , most parsers do not fully resolve noun phrase ( np ) bracketing .
as noun phrase internal structure is not a key issue for ie systems , we find the approximation acceptable and do not fully resolve np bracketing .
in contrast , we resolve semantically important ambiguities in the text such as prepositional phrase attachment , coordination , and relative clause attachment .
to extend the applicability of the dependency annotation we introduce macro-dependencies , a special form of annotation that can be expanded in different ways corresponding to the different , yet equally plausible , dependency analyses of a single grammatical phenomenon .
macro-dependencies thus allow systematic differences between dependency annotation schemes to be taken into account .
we define np macro-dependency to address the possibly most frequent systematic difference between dependency formalisms , the parallel vs. serial ( chained ) attachment of pre-modifiers to a noun .
the choice of attachment scheme is largely arbitrary , with , for example , lg and minipar [ 34 ] attaching the pre-modifiers in parallel , and , for example , connexor machinese syntax [ 35 ] attaching the pre- modifiers serially .
each parser systematically follows one of these two schemes instead of attempting to fully resolve the np structure .
in the annotation , an np macro-dependency is used to connect the leftmost pre-modifier and the head noun .
an np macro-dependency can be expanded automatically to attach all pre-modifiers spanned by the macro-dependency in either of the two manners introduced above , making the annotation applicable to the two most common analyses ( see figure 7 ) .
further , the macro-dependency is used consistently also in cases where there is only one pre- modifier .
this allows the mere presence of the macro- dependency to be used as an indicator of a non-elementary noun phrase .
macro-dependency annotation can be defined for many other grammatical phenomena where parsers systematically differ .
however , annotation with many different types of macro-dependencies would increase the complexity of the annotation process and would require greater efforts from the annotators .
for these reasons , we currently only apply np macro-dependencies .
corpus statistics .
the relationship annotation identifies 2662 relationships , of these 266 ( 10 % ) are of complex type , that is , one of their arguments is another relationship .
note that the negation predicate not is not counted as a complex relationship .
of the 2662 relationships , 163 ( 6 % ) are negated using the not predicate .
the distribution of relationship types in the four top-level subtrees of the relationship type ontology is as follows : 1461 ( 55 % ) causal , 372 ( 14 % ) is _ a , 575 ( 22 % ) part _ of , 145 ( 5 % ) observation .
further 109 ( 4 % ) of the relationships belong to the most general relationship type .
of the 1100 sentences , 260 ( 24 % ) do not contain any relationship .
the entity annotation identifies 6349 entities .
there are 4601 ( 72 % ) top-level entities , that is , entities that are not nested within any other entity .
of the 4601 top-level entities , 3318 do not contain any nested entity and 1283 do .
thus , fully 28 % of top-level entities in the bioinfer corpus are complex , nested entities .
of the total 6349 entities , 4573 ( 72 % ) are named entities .
the corpus contains a total of 33858 tokens ( 29629 excluding punctuation ) .
the average sentence length is thus relatively high , over 30 tokens .
when np macro- dependencies are expanded , the corpus contains 28139 word-to-word dependencies .
excluding punctuation , the annotation covers approximately 94 % of all words , the most frequent unannotated words appearing in citations .
there are notably many complex noun phrases and coordinations in the bioinfer corpus , as evidenced by the most commonly occurring dependency types : dependencies connecting noun pre-modifiers to nouns constitute approximately 21 % of corpus dependency types and coordinations another 9 % .
quality of the annotation .
as also discussed in the methods section below , several steps were taken to assure the quality of the annotation , including redundant dependency annotation , frequent discussions among annotators to resolve and document ambiguous cases , and repeated verification of the annotated data against a set of written rules .
these rules were formulated iteratively , from an initial tentative version to their final form documented in the annotation manual [ 36 ] .
for the current initial release of the corpus , we did not undertake the effort to measure inter-annotator agreement , a measure of the stability of the annotation scheme .
rather , we have focused our limited resources on annotating as many sentences as possible while mainitaining the quality standard .
nevertheless , quantifying the reliablility of the annotation is an important issue that we intend to address in the future .
we discuss below some of the issues relating to the measurement of inter-annotator agreement for the various types of annotation present in the corpus .
the standard approach to measuring inter-annotator agreement on categorization tasks is to fully annotate a set of sentences by two separate annotators and calculate the kappa statistic [ 37,38 ] , defined as x = p ( a ) ( ) e ) , where 1 ^ p p ( a ) is themeasured probabilityofagreementbetween annotators , and p ( e ) is the probabilitythatagreementis dueto chance .
as thebioinfercorpus contains several types of annotation , each of which is to some extent independent of the others , it is natural to measure agreement separately for the different annotation types .
however , even with this simplification , there are a number of difficulties in calculating the statistic for many of the annotation types , including the following : related biomedical corpora .
cohen et al. maintain a public resource [ 41 ] that collects information about existing biomedical corpora , including those discussed in their recent corpus comparison [ 42 ] .
in addition , hakenberg maintains a similar collection [ 43 ] .
these two collections together comprise twenty corpora that are primarily intended for biomedical nlp .
these corpora differ substantially as to their annotation types , dataset sizes as well as usage rates .
in the following , we use the names from these two collections when referring to other existing corpora .
while most of the twenty corpora provide named entity annotation of some kind , the de facto standard for biomedical named entity recognition research is the genia corpus [ 8 ] .
it provides annotation for all biomedical entities in the text , as compared to genes , proteins , rnas and related in the bioinfer corpus .
the genia annotated entities are physical entities , that is , abstract entities such as properties and processes are not annotated .
the entities are given types from the genia ontology which forms a part of the entity type ontology used in the bioinfer corpus .
syntactic annotation is provided by five corpora ( bioie , brown-genia treebank , genia treebank , depgenia , lll ) .
the former three provide constituency annotation , the latter two provide dependency annotation , where for depgenia , the annotation is obtained automatically .
with the recent interest in dependency parsers and their application to various nlp tasks , the dependency annotated corpora complement the constituency annotated corpora .
relationship annotation is provided by six corpora ( biotext , iepa , pdg , wisconsin , lll , bc ) .
for biotext , the related entities are disease and treatment , the other five contain protein-protein interactions and , in several cases , other entity relationships such as gene-disease or protein- location .
in all cases , the relationships are pairwise .
there are two aspects that set the bioinfer corpus apart in comparison with the corpora listed above .
the first aspect is the relationship annotation that captures also complex non-binary relationships and classifies these in a large number of hierarchically ordered relationship types .
to our knowledge , no other biomedical corpus provides such a detailed annotation of entity relationships .
the second aspect is the combination of the different annotation types for the main steps in common ie systems .
as discussed in the background section , the availability of all these annotation types for a single set of sentences gives , for example , an opportunity to study the relationship and error propagation in the components of ie systems rather than only develop and evaluate the components in isolation .
to our knowledge , the combination of named entity , syntactic , and relationship annotation is provided , in addition to bioinfer , only by the lll corpus .
the lll corpus is , however , much smaller than the bioinfer corpus , consisting of 166 sentences , and contains only untyped binary directed relationships .
many types of relationships annotated in bioinfer are thus not annotated in lll .
on the other hand , when comparing the individual annotation types to other corpora , it is natural that a specialized corpus provides a more detailed individual annotation than the bioinfer corpus .
for instance , the genia physical entity resolution is more detailed and coverage broader than the physical entity annotation in the bioinfer corpus .
conclusion .
in this paper , we have introduced a resource aimed at developing ie systems and their components in the biomedical domain .
we have developed a scheme providing the key types of annotation for a single set of sentences , expressing complex relationships between both physical and abstract entities .
as part of the annotation scheme , we have introduced two ontologies defining the types of entities and their relationships .
using this annotation scheme , we have developed a corpus of 1100 sentences containing full dependency annotation , dependency types and comprehensive annotation of bioentities and their relationships .
the bioinfer corpus is publicly available [ 17 ] .
as future work , we intend to apply the corpus in the development and evaluation of an ie system and in the process identify the strengths and weaknesses of the current annotation .
based on this experience , we plan to enhance and extend the corpus annotation to further increase its utility as a resource for biomedical natural language processing .
methods .
in this section , we present in greater detail the use of special predicates for , e.g. , coreference and abbreviations , and discuss the rules determining the textual extent and type of annotated entities .
a comprehensive collection of annotation rules regarding entities , relationships and their types is given in the bioinfer annotation manual [ 36 ] .
further , we present the dependency annotation of coordination and the method used to automatically determine dependency types .
finally , we discuss the source of the corpus text and the annotation process .
the only relevant relationship in the sentence is control ( cadherins , beta-catenin signaling ) .
apart from the relationship itself , it is also crucial to consider how an ie system would extract the relationship , and provide corresponding annotation in the corpus .
in the sentence above , many ie systems would resolve the coreference between cadherins and the pronoun they and extract the relationship through the pronoun which is syntactically closer to the relationship statement .
in the bioinfer corpus , coreference is annotated using the predicate corefer .
the annotation for the sentence above would thus be corefer ( they , cadherins ) and control ( they , beta-catenin signaling ) .
the corefer predicate captures an asymmetrical relationship where the first argument is semantically dependent on the second argument .
the predicate is interpreted as a simple textual replacement of the text of the first argument with the text of the second argument .
in the majority of cases , the second argument of corefer is a named biomedical entity .
there are , however , cases where this is not true .
consider , for instance , the sentence gamma-catenin distribution is remarkably similar to that of beta-catenin. where the annotation contains corefer ( that , distribution ) .
under the textual-replacement interpretation , that is replaced with distribution to obtain the entity distribution of beta-catenin .
coreference is resolved only in cases where the resolution is necessary for annotating a relevant relationship .
the exact rules governing the usage of the corefer predicate are further detailed in the annotation manual .
implicit reference .
these relationships cannot be directly annotated because the sentence states only implicitly that depolymerization relates to actin filaments .
this case can , however , be viewed as a case of nesting with its inner-most element not realized .
we use the predicate rel-ent to state the implicit reference .
the annotation for the example sentence would be cause ( attach ( profilin , actin filaments ) , depolymerization ) and rel-ent ( depolymerization , actin filaments ) .
the rel-ent predicate is interpreted as a nesting , equivalent to the use of the phrase depolymerization of actin filaments .
abbreviation definitions and entity equality .
the equal predicate captures the equality of two entities .
the use of the equal predicate is illustrated in the examples below .
the most common case of equality is abbreviation and synonym definition ( i-ii ) , other cases are statements of the type x is y ( iii ) , and statements with several names for the same bioentity ( iv ) .
semantically the equal predicate is symmetrical , that is , equal ( a , b ) is interpreted identically to equal ( b , a ) .
the predicate is interpreted such that when equal ( a , b ) , any relationship that holds for a holds also for b and vice versa .
statements of confidence and negation .
different levels of confidence or conclusiveness of the reported results are currently not annotated .
relationships introduced through statements such as we suggest that or we tested for are annotated as if the statements were absent .
statements on the absence of a relationship such as not affected by or independent of are annotated using a special predicate not .
anonymous entities .
rarely , an entity may have no realization in the text ( 0.3 % of all entities ) .
such entities are called anonymous entities and have a type but no text binding .
anonymous entities most commonly occur with statements of protein complex forming such as cadherin molecules are complexed with alpha-catenin and beta-catenin .
in accordance with the bioinfer annotation of protein complexes , the complex is an entity whose constituents are related to it through the contain relationship .
in the example above , the complex is an anonymous entity .
entities outside the annotation scope .
as a general principle , only those entities that have a named gene , protein , or rna at their innermost level of nesting are annotated .
there are , however , complex relationships where , for example , a protein affects a relationship of another protein with an entity falling outside the scope of the annotation .
consider the sentence profilin inhibits hydrolysis of pip2 by phospholipase c. with the relationship suppress ( profilin , cleave ( phospholipase c , pip2 ) ) .
since pip2 falls outside the annotation scope , no relationship could be annotated .
in cases of the general type rel ( x , rel ( y , z ) ) where y or z falls outside the annotation scope , we make an exception and annotate the entity in order to capture the relationship of the proteins .
such an annotation is marked with a special predicate other and can thus be disregarded for some applications of the corpus .
entity extent and typing .
established names of genes , proteins , and rna as well as functionally well-defined gene / protein families and groups are annotated without nesting , so that when a named entity contains other candidate named entities , only the broader , contextually salient entity is annotated .
for example , as cyclin-dependent kinase inhibitors is an established protein family name , it is annotated as a single name even though it contains the candidate names cyclin and kinase .
the extent of named entities also includes the source within an organism , such as tissue or organ , as they appear in established names .
for example , alpha-smooth muscle actin is annotated as a whole , instead of , for example , alpha-actin or only actin .
by contrast , such specifications appearing as prepositional phrases or relative clauses are not considered part of the name : in actin from rabbit skeletal muscle , actin is annotated as the name .
organism names are not considered part of gene / protein / rna names , but are included in extended named entities : in acanthamoeba profilin inhibits acanthamoeba actin polymerization , the basic named entities are profilin and actin ; the organism acanthamoeba is part of the extended named entities only .
in determining the extent of extended named entities , the general rule is to include only the minimum necessary to include the named entity the extended named entity pertains to and resolve the type of the extended named entity .
thus , for example in td77 disrupts actin stress fibers , the related entities are td77 and actin fibers , the latter excluding the modifier stress .
likewise , in cofilin plays a crucial role in rapid remodeling of the cortical actin meshwork the entities are cofilin and remodeling of actin meshwork , excluding rapid and cortical .
this approach allows differentiating key phrases stating entities from modifiers appearing only coincidentally .
note that the attachment of the omitted modifiers to the entity is still preserved by the dependency annotation .
entity types are assigned from the entity type ontology to all annotated entities .
in typing named entities ( 72 % of all entities ) , we took advantage of the relationship annotation to automatically assign types to those named entities whose type was determined by the relationships they participate in ( 17 % of all entities ) .
additionally , a number of named entities were assigned types based on their names when the annotators decided that the name unambiguously describes a specific type ( 25 % of all entities ) .
for entities that are not involved in any relationship nor nested in entities that are , i.e. entities that are not relevant to any relationship , only the generic type gene / protein / rna is currently assigned ( 19 % of all entities ) .
the remaining untyped named entities ( 10 % of all entities ) as well as all entities which are not named entities ( 28 % of all entities ) , were assigned their type by manual examination ( 38 % of all entities ) .
dependency annotation for coordination .
capturing coordination in the dependency syntax framework is not straightforward and there exist various approaches to the problem .
the link grammar and , for example , the parc 700 dependency bank annotation [ 44 ] , capture coordination using a structure in which the coordinated elements are dependents of the coordinator , which in turn represents the functional role of each of the coordinates .
in contrast , the connexor machinese syntax parser , for example , chains the coordinated elements and the head of the chain shows the functional role of the coordinated units , while the coordinator is a mere dependent of one of the elements in the chain .
see figures 8 and 9 for illustration of the structures discussed .
we follow the lg approach to coordination .
the lg approach is more expressive than the chaining described above , allowing , for example , a single modifier to apply to all of the coordinated elements ( figure 9 ) .
the more expressive lg annotation can be transformed to the less expressive chaining annotation , but not vice versa .
further , we consider the fact that all of the coordinated elements occur at the same level in the parse structure to be an obvious advantage for ie system development .
in a corpus that is used to develop tools for extracting bioentity relationships , it is not critical to resolve the internal structure for every noun phrase , a general principle followed by both bioinfer and , for example , the genia treebank .
in the bioinfer corpus , pre-modifier attachment in noun phrases without internal coordination is not resolved , as these phrases typically only contain at most one named entity .
in noun phrases that contain internal coordination , however , each of the coordinates can represent a different named entity and resolving the coordination and thus separating the named entities from each other is vital to the ie task .
the distinction is illustrated in figure 10 .
from the perspective of an ie system extracting bioentity relationships , the difference between the correct bracketing [ [ actin filament ] core bundles ] and the unresolved bracketing [ actin filament core bundles ] is not critically important because actin is the only protein in the phrase and the inner structure of the phrase can be ignored .
on the contrary , the correct resolution of the coordination [ [ [ myosin heavy chain ] and [ actin ] ] isoforms ] is important because the coordinates are protein names and hence of importance to the ie system .
while the inner structure of the coordinated phrases is still not necessarily fully resolved , the two protein names are separated by the coordination .
further , while major wide-coverage dependency parsers such as connexor machinese syntax , minipar , and link parser do not resolve the attachment of pre-modifiers in noun phrases , they do resolve coordination .
the annotation in bioinfer thus coincides with the intended coverage of these parsers .
dependency types .
during the manual dependency annotation , the dependency types were not specified .
due to the large number of dependency types defined in lg ( more than 100 main types with almost 400 subtypes ) the effort to manually determine the type of each dependency is prohibitive .
however , dependency types are important for many uses of the corpus .
thus , we have developed a reliable heuristic method for determining dependency types automatically given the dependency structure .
this method has been used to assign dependency types to the whole corpus .
in addition , quality control of the dependency types has been performed by manual examination .
the method to determine dependency types has four main steps : reducing the complexity of the sentences , parsing the simplified sentences , assigning dependency types based on the parses , and extending the types to the full sentences using a set of rules .
in the following , these steps are described in more detail .
sentence simplification .
np macro-dependencies have an important role in the simplification of the sentences .
as the attachment of pre- modifiers in noun phrases covered by np macro-dependencies can be determined with simple rules without parsing , any np macro-dependency present in the sentences can be truncated so that all the pre-modifiers spanned by the macro-dependency are removed .
this procedure reduced the number of words by more than 20 % and removed all problems related to the parsing of these noun phrases .
the sentences were further simplified by capitalizing common uncapitalized proper names and removing citations .
parsing .
we parsed the simplified sentences with a modified version of the lg parser that overcomes some of the problems of the unmodified lg parser for biomedical text [ 10 ] .
the modifications include an extended biomedical lexicon [ 33 ] as well as support for many of the grammatical phenomena not recognized by the unmodified parser .
for each sentence , we consider up to a thousand alternative parses produced by the parser .
majority types .
for each sentence , we determine by comparison against the manually created dependency structure the subset of parses with the maximal number of recovered dependencies .
the intuition underlying this selection heuristic is that parses having correct dependency structure also have the correct dependency types .
from the set of maximally correct parses , we then determine for each dependency the majority type , that is , the type which most commonly appears for the dependency in the parses .
finalization .
we transfer the majority types from the simplified to the full sentences and resolve the types of the dependencies associated with the truncated noun phrases using straightforward rules .
we found that the quality of dependency types is significantly higher for sentences that receive fully correct parses in the parsing step .
we thus mark sentences depending on whether or not they were fully correctly parsed , allowing users of the corpus to choose whether to use all dependency types or only the most reliable ones .
to evaluate the quality of the automatically produced dependency types , we manually examined 30 randomly chosen sentences with fully correct parses and 30 randomly chosen sentences for which fully correct parses were not obtained .
for the fully correctly parsed sentences , the heuristic method assigned the correct dependency type to 575 out of 586 dependencies ( 98 % ) .
for the sentences without fully correct parse , 828 out of 962 dependencies ( 86 % ) were assigned their correct type .
out of the 1100 sentences , 741 ( 67 % ) received a fully correct parse .
corpus data .
the sentences that form the corpus text were selected using the following procedure .
pairs of proteins that are known to interact were extracted from the database of interacting proteins dip [ 45,46 ] .
these pairs were entered as search terms into the pubmed retrieval system and the returned publication abstracts including titles were split into sentences .
these sentences were then searched for the protein pairs , giving a set of 2240 sentences that contain the names of at least two proteins that are known to interact ( the selection was performed in december 2001 ) .
compared to a random sample of pubmed , this selection procedure results in a corpus with a much higher proportion of relevant sentences , that is sentences that state actual relationships .
the sentences are preserved as they appear in the article abstracts , including spelling errors , grammatical mistakes , and , for example , embedded citations .
supporting software .
the bioinfer corpus is provided in an xml format .
xml is a standard text-based format for structured documents , and xml parsers are freely available .
due to the relatively complex structure of some of the annotation types in the bioinfer corpus , we provide supporting software to further ease the use of the corpus .
the supporting software is based on an extendable framework for parsing the corpus and representing it as data structures that can be accessed through a fully documented api ( application programming interface ) providing methods for accessing different aspects of the annotation .
in addition , we provide programs built on this api that visualize the annotations and extract them in a simplified , human-readable form ( see appendix i ) .
the user interface of bioinfer visualizer is shown in figure 11 .
with the bioinfer api , it is easy to create programs which , for example , analyze the corpus data or transform the annotation into formats required by other software .
all supporting software is written in python , thoroughly documented , and available under an open-source license on the corpus website .
annotation process it is common practice to use automatically parsed text as the starting point for syntax annotation .
however , since general english parsers could not provide sufficiently accurate parses due to their generally poor performance on biomedical text , we chose to create the dependency annotation manually without a baseline parse .
fully manual annotation also helps to avoid bias toward systematic errors introduced by the parser .
the dependency annotation was created by six annotators who worked in rotating pairs to reduce variation and avoid systematic errors .
the set of sentences was divided into batches of nine sentences and each batch was assigned to one pair for annotation .
for each batch the dependency annotation was first created by both members of the pair independently .
the annotations were then compared and in case of differences , the matter was discussed until an agreement was reached .
two of the annotators were biology experts and the other four annotators had a possibility to consult an expert .
further , all annotators acquired thorough knowledge of the lg dependency formalism .
the entity and relationship annotations were created in parallel , partially based on a previous unpublished entity and relationship annotation of the corpus .
this annotation was created by a biology expert , difficult cases and annotation rules being discussed with two ie researchers .
the pair annotation strategy used in producing the dependency annotation was not applied for the entity and relationship annotation .
the annotation was produced in several passes through the data as the rules and annotation types were refined , taking into account experience gained in the previous annotation .
the last full pass was carried out shortly before publication .
we estimate that the annotation of the bioinfer corpus consumed 2500 man-hours , that is , 15 man-months , not including time spent on previous , unpublished annotation of the data , tool building , development of supporting software , and the design of the annotation scheme .
appendix i ï¿½ relationship annotation examples in this appendix , we list several annotated sentences from the corpus , in order to demonstrate the relationship annotation scheme on non-trivial , real-world cases .
for each example , we list all annotated relationships along with other information when necessary .
since snf11 and component are syntactically bound through a dependency that unambiguously identifies the coreference ( see the annotation manual [ 36 ] for the relevant definition of syntactic binding ) , the interaction is annotated directly between snf1 1 and region of snf2 .
authors ' contributions .
sp and fg are the primary authors of this work and their contribution is equal .
sp and fg have conceived the corpus annotation scheme in its present form , with a significant contribution by jh to the biomedical aspects of the annotation .
the text of the paper was written by sp and fg .
jh was the principal annotator for the entity and relationship annotation .
the dependency annotation was produced jointly by jh , jbj , sp , and fg .
the entity type annotation was produced by jh and jbj .
the work was supervised by jbo , jj , and ts since its beginning in late 2001 , and they have contributed to both the content and the form of the corpus and the paper .
all authors read and approved the final manuscript .
