cogex : a logic prover for question answering .
abstract .
recent trec results have demonstrated the need for deeper text understanding methods .
this paper introduces the idea of automated reasoning applied to question answering and shows the feasibility of integrating a logic prover into a question answering system .
the approach is to transform questions and answer passages into logic representations .
world knowledge axioms as well as linguistic axioms are supplied to the prover which renders a deep understanding of the relationship between question text and answer text .
moreover , the trace of the proofs provide answer justifications .
the results show that the prover boosts the performance of the qa system on trec questions by 30 % .
introduction .
motivation .
in spite of significant advances made recently in the question answering technology , there still remain many problems to be solved .
some of these are : bridging the gap between question and answer words , pinpointing exact answers , taking into consideration syntactic and semantic roles of words , better answer ranking , answer justification , and others .
the recent trec results ( voorhees 2002 ) have demonstrated that many performing systems reached a plateau ; the systems ranked from 4th to 14th answered correctly between 38.4 % to 24.8 % of the total number of questions .
it is clear that new ideas based on a deeper language understanding are necessary to push further the qa technology .
in this paper we introduce one such novel idea , the use of automated reasoning in qa , and show that it is feasible , effective , and scalable .
we have implemented a logic prover , called cogex ( from the permutation of the first two syllables of the verb excogitate ) which uniformly codifies the question and answer text , as well as world knowledge resources , in order to use its inference engine to verify and extract any lexical relationships between the question and its candidate answers .
usefulness of a logic prover in qa .
cogex captures the syntax-based relationships such as the syntactic objects , syntactic subjects , prepositional attachments , complex nominals , and adverbial / adjectival adjuncts provided by the logic representation of text .
in addition to the logic representations of questions and candidate answers , the qa logic prover needs world knowledge axioms to link question concepts to answer concepts .
these axioms are provided by the wordnet glosses represented in logic forms .
additionally , the prover needs rewriting procedures for semantically equivalent lexical patterns .
with this deep and intelligent representation , cogex effectively and efficiently re-ranks candidate answers by their correctness , extracts the exact answer , and ultimately eliminates incorrect answers .
in this way , the logic prover is a powerful tool in boosting the accuracy of the qa system .
moreover , the trace of a proof constitutes a justification for that answer .
technical challenges .
the challenges one faces when using automated reasoning in the context of nlp include : logic representation of open text , need of world knowledge axioms , logic representation of semantically equivalent linguistic patterns , and others .
logic proofs are accurate but costly , both in terms of high failure rate due to insufficient input axioms , as well as long processing time .
our solution is to integrate the prover into the qa system and rely on reasoning methods only to augment other previously implemented answer extraction techniques .
integration of logic prover into a qa system .
the qa system includes traditional modules such as question processing , document retrieval , answer extraction , built in ontologies , as well as many tools such as syntactic parser , name entity recognizer , word sense disambiguation ( moldovan and noviscki 2002 ) , logic representation of text ( moldovan and rus 2001 ) and others .
the logic prover is integrated in this rich nlp environment and augments the qa system operation .
as shown in figure 1 , the inputs to cogex consist of logic representations of questions , potential answer paragraphs , world knowledge and lexical information .
the term answer logic form ( alf ) refers to the candidate answers in logic form .
candidate answers returned by the answer extraction module are classified as open text due to the unpredictable nature of their grammatical structure .
the term question logic form ( qlf ) refers to the questions posed to the question answering system represented in logic form .
the prover also needs world knowledge axioms supplied by the wordnet glosses transformed into logic representations .
additionally there are many other axioms representing equivalence classes of linguistic patterns , called nlp axioms .
all these are described below .
the axiom builder converts the logic forms for the question , the glosses , and its candidate answers into axioms .
based on the parse tree patterns in the question and answers , other nlp axioms are built to supplement the existing general nlp axioms .
once the axioms are complete and loaded , justification of the answer begins .
if a proof fails , the relaxation module is invoked .
the purpose of this module is twofold : ( 1 ) to compensate for errors in the text parsing and logic form transformation phase , such as prepositional attachments and subject / object detection in verbs , ( 2 ) to detect correct answers when the nlp and xwn ( extended wordnet ) axioms fail to provide all the necessary inferences .
during the relaxation , arguments to predicates in the question are incrementally uncoupled , the proof score is reduced , and the justification is re-attempted .
the loop between the justification and the relaxation modules continues until the proof succeeds , or the proof score is below a predefined threshold .
when all the candidate answers are processed , the candidate answers are ranked based on their proof scores , with the output from cogex being the ranked answers and the answer justifications .
logic representation of text .
a text logic form ( lf ) is an intermediary step between syntactic parse and the deep semantic form .
the lf codification acknowledges syntax-based relationships such as : ( 1 ) syntactic subjects , ( 2 ) syntactic objects , ( 3 ) prepositional attachments , ( 4 ) complex nominals , and ( 5 ) adjectival / adverbial adjuncts .
our approach is to derive the lf directly from the output of the syntactic parser which already resolves structural and syntactic ambiguities .
essentially there is a one to one mapping of the words of the text into the predicates in the logic form .
the predicate names consist of the base form of the word concatenated with the part of speech of the word .
each noun has an argument that is used to represent it in other predicates .
one of the most important features of the logic form representation is the fixed-slot allocation mechanism of the verb predicates ( hobbs 1993 ) .
this allows for the logic prover to see the difference between the role of the subjects and objects in a sentence that is not answerable in a keyword based situation .
logic forms are derived from the grammar rules found in the parse tree of a sentence .
there are far too many grammar rules in the english language to efficiently and realistically implement them all .
we have observed that the top ten most frequently used grammar rules cover 90 % of the cases for wordnet glosses .
this is referred to as the 10-90 rule ( moldovan and rus 2001 ) .
below we provide a sample sentence and its corresponding lf representation .
world knowledge axioms .
logic representation of wordnet glosses .
a major problem in qa is that often an answer is expressed in words different from the question keywords .
world knowledge is necessary to conceptually link questions and answers .
wordnet glosses contain a source of world knowledge .
to be useful in automated reasoning , the glosses need to be transformed into logic forms .
taking the same approach as for open text , we have parsed and represented in logic forms more than 50,000 wordnet glosses .
a much improved source of world knowledge is obtained when the gloss words are semantically disambiguated ( moldovan and noviscki 2002 ) .
by doing this , the connectivity between synsets is dramatically increased .
lexical chains can be established between synsets in different hierarchies .
these are sequences of semantically related words that link two concepts .
lexical chains improve the performance of question answering systems in two ways : ( 1 ) increase the document retrieval recall and ( 2 ) improve the answer extraction by providing the much needed world knowledge axioms that link question keywords with answers concepts .
we developed software that automatically provides connecting paths between any two wordnet synsets and up to a certain distance ( moldovan and noviscki 2002 ) .
the meaning of these paths is that the concepts along a path are topically related .
the path may contain any of the wordnet relations augmented with a gloss relation which indicates that a certain concept is present in a synset gloss .
nlp axioms .
in additions to world knowledge axioms , a qa logic prover needs linguistic knowledge .
this is what distinguishes an nlp prover from a traditional mathematical prover .
general axioms that reflect equivalence classes of linguistic patterns need to be created and instantiated when invoked .
we call these nlp axioms and present below some examples together with questions that call them .
complex nominals and coordinated conjunctions .
a question may refer to a subject / object by its full proper name , and the answer will refer to the subject / object in an abbreviated form .
for example in the correct candidate answer for the question , which company created the internet browser mosaic ? , internet browser mosaic is referred to as mosaic .
using abduction , an axiom is built such that the head noun of the complex nominal in the question implies the remaining nouns in the complex nominal : an additional axiom is built such that all the nouns in the complex nominal imply a complex nominal : so as not to restrict the ordering of the nouns in the noun phrase from which the complex nominal is built , the same argument is used for each of the noun predicates in the complex nominal .
similar to the above issue , a question may refer to the subject / object in an abbreviated form , while the answer will refer to the subject / object in its full , proper form .
for example in the correct candidate answer for the question , when was microsoft established ? , microsoft is referred to as microsoft corp.
an axiom is built such that each noun of the complex nominal takes on the identifying argument of the complex nominal : all x1 x2 x3 ( microsoft nn ( x1 ) & corp nn ( x2 ) & nn nnc ( x3 , x1 , x2 ) microsoft nn ( x3 ) & corp nn ( x3 ) ) similar axioms are used for coordinated conjunctions detected in the answer and the question .
these are considered weak axioms , and any proof that uses them will be penalized by being given a lower score than those that do not .
appositions .
a candidate answer for a question may use an apposition to describe the subject / object of the answer .
the question may refer to the subject / object by this apposition .
possesives .
a question / answer substitutes the use of a possesive by using an of or by preposition .
for example , in the question , what was the length of the wright brothers first flight ? , the candidate answer , flying machines , which got off the ground with a 120 - foot flight by the wright brothers in 1903 ... implies ownership using the preposition by to connect the wright brothers to flight .
equivalence classes for prepositions .
prepositions can be grouped into equivalence classes depending on the context of the question , which is determined by the expected answer type .
in location seeking questions the prepositions at and in are often interchangeable .
similarly for in and into , and from and of .
in date seeking questions in and of have interchangeable meanings as do at and in .
a location seeking question may have a candidate answer that identifies a location by referring to a part of the location .
attribute of relations in quantity seeking questions a question seeking a quantity may have a candidate answer that implies quantity of subject by prefixing the quantity to the subject .
this is a weak axiom since the proximity of redwood to quantity in the answer text is not guaranteed .
as mentioned for the complex nominal and coordinated conjunction axioms , any proof that uses these axioms should be penalized and ranked lower than those that do not .
note that for this axiom to be effective , an axiom linking the heads of the apposition is built : control strategy .
axiom partitioning mechanism .
the search strategy used is the set of support strategy , which partitions the axioms used during the course of a proof into those that have support and those that are considered auxiliary ( wos 1988 ) .
the axioms with support are placed in the set of support ( sos ) list and are intended to guide the proof .
the auxiliary axioms are placed in the usable list and are used to help the sos infer new clauses .
this strategy restricts the search such that a new clause is inferred if and only if one of its parent clauses come from the set of support .
the axioms that are placed in the sos are the candidate answers , the question negated ( to invoke the proof by contradiction ) , and axioms related to linking named entities to answer types .
axioms placed in the usable list are : ( 1 ) extended wordnet axioms , ( 2 ) nlp axioms , and ( 3 ) axioms based on outside world knowledge , such as people and organizations .
inference rules .
the inference rule sets are based on hyperresolution and paramodulation .
hyperresolution is an inference rule that does multiple binary resolution steps in one , where binary resolution is an inference mechanism that looks for a positive literal in one clause and negative form of that same literal in another clause such that the two literals can be canceled , resulting in a newly inferred clause .
paramodulation introduces the notion of equality substitution so that axioms representing equality in the proof do not need to be explicitly included in the axiom lists .
additionally , similar to hyperresolution , paramodulation combines multiple substitution steps into one .
all modern theorem provers use hyperresolution and paramodulation inference rules since they allow for a more compact and efficient proof by condensing multiple steps into one .
cogex will continue trying to find a proof until the set of support becomes empty , a refutation is found , or the proof score drops below a predefined threshold .
two techniques have been implemented in cogex to deal with incomplete proofs : count the number of unifications / resolutions with terms in the question along the longest search path in the proof attempts , and relax the question logic form by incrementally uncoupling arguments in the predicates , and / or removing prepositions or modifiers that are not crucial to the meaning of the text .
for example in question , how far is yaroslavl from moscow ? a candidate answer is ..
yaroslavl , a city 250 miles north ofmoscow .
by dropping the from predicate in the question makes the proof succeed for the candidate answer .
an example .
the following example illustrates how all these pieces are put together to generate answer proofs .
in particular , a program called mosaic , developed by the national center for supercomputing applications ( ncsa ) at the university of illinois at urbana - champaign , is gaining popularity as an easy to use point and click interface for searching portions of the internet .
wordnet gloss axioms .
the question contained the verb create while the answer contains the verb develop .
in order to prove that this answer is in fact correct , we need to detect and use a lexical chain between develop and create .
wordnet supplies us with that chain such that develop make and make create question being derived in their positive form so the proof by contradiction succeeds , which is indicated by the $ f in the final step and the hyperresolution of all the derived terms with the negated question from step 1 of the proof .
the success of this proof boosts the candidate answer to the first position .
when the proof fails , we devised a way to incrementally relax some of the conditions that hinder the completion of the proof .
this relaxation process puts weights on the proof such that proofs weaker than a predefined threshold are not accepted .
results .
cogex was implemented and integrated into a state-of-the-art question answering system that participated in trec 2002 .
all questions are attempted by the prover , but if the proof fails the qa system resorts to other answer extraction methods that were part of the system before the prover .
thus , some questions are answered by the qa system without the prover , some only by the prover and some by both the non-prover system and the prover .
the complete system answered 415 questions out of 500 trec 2002 questions .
of these , 206 were answered by cogex but some of these answers were also provided by qa system without cogex .
a careful analysis indicates that the qa system without logic prover answered 317 questions and the prover can answer only 98 additional questions for which the system without prover failed .
table 1 summarizes these results .
the added value of automated reasoning to the qa system is 30.9 % ( 98 / 317 ) .
this represents a significant improvement in the performance of the logic prover for qa over the one reported in ( moldovan 2002 ) .
the failures of the prover are due primarily to the lack of linguistic axioms .
discussion .
a logic prover brings several advantages to question answering , but at a high cost .
some advantages are : the capability of pinpointing exact answers that otherwise will be missed , answer justification , and a quantifiable measure of how close a system is to providing an answer .
however , the implementation of a qa logic prover is expensive as it requires logic representation of text , world knowledge axioms and a large number of linguistic axioms , that all take time to develop .
